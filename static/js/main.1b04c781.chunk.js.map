{"version":3,"sources":["components/Navbar.tsx","Matrix.tsx","components/Table.tsx","utils/DefaultMatrix.tsx","utils/RandomMatrix.tsx","components/InfoModel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","react_default","a","createElement","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","CellValue","Matrix","rows","columns","matrix","classCallCheck","this","cells","visitedCells","create2DArray","largestResult","j","k","isOn","result","queue","length","cell","shift","getSurroundingCells","push","apply","toConsumableArray","arguments","undefined","matches","match","TypeError","generateErrorMessage","i","begin","end","row","slice","map","value","OFF","ON","Array","fill","_ref","_this","trim","split","forEach","index","throwErrorMessage","Error","concat","Table","props","cellValue","key","style","height","width","default_matrix","repeat","random_matrix","Math","floor","random","InfoModel","Fragment","Modal","modal","toggle","toggleFunc","ModalHeader","ModalBody","ModalFooter","Button","App","setRows","_useState3","_useState4","cols","setCols","_useState5","DEFAULT_MATRIX","_useState6","setMatrix","_useState7","_useState8","setModal","answer","handleModal","connectedCells","ConnectedCells","Alert","calc","Container","fluid","components_Table","error","message","Row","Col","md","Navbar_Navbar","Form","FormGroup","Label","for","Input","type","name","placeholder","onChange","event","parseInt","target","toString","fontFamily","fontSize","randomRows","randomCols","RANDOM_MATRIX","components_InfoModel","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b04c781.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Collapse,\n  Navbar as BootstrapNavbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from 'reactstrap'\n\nexport default function Navbar(){\n  const [collapsed, setCollapsed] = useState(false)\n\n  return (\n    <BootstrapNavbar color=\"light\" light expand=\"md\">\n      <NavbarBrand href=\"https://edwincapel.github.io/connected-cells/\">Connected Cells</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/edwin-capel-5b055793/\">LinkedIn</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/edwincapel\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://medium.com/@edwinrc1026/python-news-scraper-with-react-part-1-971e1ed2fb7\">Medium</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.reddit.com/r/FortniteBattleRoyale/comments/aklpjw/made_a_script_that_compiles_top_10_fortnite/\">Reddit</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  )\n}","export enum CellValue {\n  ON = \"1\",\n  OFF = \"0\"\n}\n\ninterface Position {\n  j: number,\n  k: number\n}\n\nexport default class Matrix {\n  rows: number\n  columns: number\n  cells: CellValue[][]\n  visitedCells: boolean[][]\n\n  constructor(\n    rows: number,\n    columns: number,\n    matrix: string,\n  ) {\n    this.rows = rows\n    this.columns = columns\n    this.cells = []\n    this.visitedCells = []\n\n    this.create2DArray(rows, columns, matrix)\n  }\n\n  calc(): number {\n    let largestResult = 0\n\n    for (let j = 0; j < this.rows; j++) {\n      for (let k = 0; k < this.columns; k++) {\n        if (this.visitedCells[j][k]) {\n          continue\n        }\n\n        if (!this.isOn(j,k)) {\n          continue\n        }\n\n        let result = 0\n        const queue = [{j,k}]\n\n        while (queue.length) {\n          const cell = queue.shift()\n          if (!cell) {\n            continue\n          }\n          if (this.visitedCells[cell.j][cell.k]) {\n            continue\n          }\n\n          this.visitedCells[cell.j][cell.k] = true\n\n          if (!this.isOn(cell.j, cell.k)) {\n            continue\n          }\n\n          result += 1\n          const cells = this.getSurroundingCells(cell)\n          queue.push(...cells)\n        }\n\n        if (result > largestResult) {\n          largestResult = result\n        }\n      }\n    }\n\n    return largestResult\n  }\n\n  create2DArray(rows:number = 0, columns:number = 0, matrix:string = \"\"): void {\n    let matches = matrix.match(/(\\d+)/g)\n\n    if (matches == null){\n      throw new TypeError(\"Cannot parse matrix\")\n    }\n\n    if(matches.length !== rows * columns){\n      this.generateErrorMessage(matrix)\n    }\n\n    for (var i=0;i<rows;i++) {\n      const begin = i * this.columns\n      const end = (i + 1) * this.columns\n      const row = matches.slice(begin, end)\n\n      if (row.length !== this.columns) {\n        this.generateErrorMessage(matrix)\n      }\n\n      this.cells.push(row.map(value => value === \"0\" ? CellValue.OFF : CellValue.ON))\n      this.visitedCells[i] = new Array(this.columns).fill(false)\n    }\n  }\n\n  isOn(j: number, k:number): boolean {\n    return this.cells[j][k] === CellValue.ON\n  }\n\n  getSurroundingCells({j,k}: Position): Position[]{\n    const cells: Position[] = []\n    if (j !== 0) {\n      if (k !== 0) {\n        cells.push({j: j-1, k: k-1})\n      }\n\n      cells.push({j: j-1,k})\n\n      if (k !== this.columns - 1) {\n        cells.push({j: j-1, k: k+1})\n      }\n    }\n\n    if (k !== 0) {\n      cells.push({j: j, k: k -1})\n    }\n    if (k !== this.columns - 1) {\n      cells.push({j: j, k: k + 1})\n    }\n\n    if (j !== this.rows - 1) {\n      if (k !== 0) {\n        cells.push({j: j + 1, k: k -1})\n      }\n      cells.push({j: j + 1, k});\n      if (k !== this.columns - 1) {\n        cells.push({j: j + 1, k: k + 1})\n      }\n    }\n\n    return cells\n  }\n\n  generateErrorMessage(matrix: string): void{\n    matrix.trim().split(\"\\n\").forEach((row,index) => {\n      const match = row.match(/(\\d+)/g)\n\n      if (match === null) {\n        this.throwErrorMessage(index + 1, 0)\n      } else if(match.length !== this.columns) {\n        this.throwErrorMessage(index + 1,match.length)\n      }\n    })\n  }\n\n  throwErrorMessage(row: number, length: number): void{\n    throw new Error(`Row ${row} is not valid. Expected ${this.columns}, Actual: ${length}`)\n  }\n}\n","import React from \"react\"\nimport {CellValue} from \"../Matrix\"\n\ninterface Props {\n  cells: CellValue[][],\n}\n\n\nconst Table: React.FC<Props> = (props) => {\n  const cells = props.cells.map((row,j) => {\n    const columns = row.map((cellValue, k)=>{\n      const key = `${j}:${k}`\n\n      const className = cellValue === CellValue.ON ? \"bg-dark text-white\" :  ''\n\n      return(\n        <div key={key} className={`${className} p-1 border border-dark text-center`} style={{height: \"50px\",width:\"50px\"}}>\n          {cellValue}\n        </div>\n      )\n    })\n\n    return(\n      <div key={`row:${j}`} className=\"d-flex\">\n        {columns}\n      </div>\n    )\n  })\n\n  return(\n    <div className=\"text-dark\">\n      {cells}\n    </div>\n  )\n}\nexport default Table","const default_matrix = (rows:number = 0, columns:number = 0) => {\n  let matrix = \"\"\n\n  for (let i = 0; i < rows; i++) {\n    matrix += (\"0 \").repeat(columns) \n    matrix += \"\\n\"\n  }\n\n  return matrix\n}\n\nexport default default_matrix","const random_matrix = (rows:number = 0, columns:number = 0) => {\n  let matrix = \"\"\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      matrix += `${Math.floor((Math.random() * 2))} `\n    }\n    matrix += \"\\n\"\n  }\n\n  return matrix\n}\n\nexport default random_matrix","\nimport React from \"react\"\nimport { \n  Button, \n  Modal, \n  ModalHeader, \n  ModalBody,\n  ModalFooter \n  } from 'reactstrap'\n\ninterface Props {\n  modal: boolean,\n  toggleFunc: any\n}\n\nconst InfoModel: React.FC<Props> = (props) => {\n  return(\n    <>\n      <Modal isOpen={props.modal} toggle={props.toggleFunc}>\n        <ModalHeader toggle={props.toggleFunc}>Info About this App</ModalHeader>\n        <ModalBody>\n        Assumptions:\n        <ul>\n          <li>\n              Characters are limited to <code>0</code> or <code>1</code>\n            <ul>\n              <li>We only read numerical characters</li>\n              <li>We treat all <code>0</code>'s as \"off\"</li>\n              <li>We treat all non <code>0</code>'s as \"on\"</li>\n            </ul>\n          </li>\n          <li>Rows and Columns are always numbers</li>\n          <li>Matrix has no starting or trailing spaces</li>\n          <li className=\"text-danger\">This Matrix UI works best when number of Col is less than or equals 12</li>\n        </ul>\n\n        Steps:\n        <ol>\n          <li>Insert Row and Column, that will generate a default matrix of 0's</li>\n          <li>Insert Custom Matrix or Edit Default Matrix</li>\n        </ol>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={props.toggleFunc}>Close</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nexport default InfoModel","import React,{ useState } from 'react'\nimport './App.css'\nimport Navbar from \"./components/Navbar\"\nimport ConnectedCells from \"./Matrix\"\nimport { Alert, Container, Row, Col, Form, FormGroup, Label, Input, Button} from \"reactstrap\"\nimport Table from \"./components/Table\"\nimport DEFAULT_MATRIX from './utils/DefaultMatrix'\nimport RANDOM_MATRIX from './utils/RandomMatrix'\nimport InfoModal from './components/InfoModel'\n\nconst App: React.FC = () => {\n  const [rows, setRows] = useState(5)\n  const [cols, setCols] = useState(5)\n  const [matrix, setMatrix] = useState(DEFAULT_MATRIX(rows,cols))\n  const [modal, setModal] = useState(false)\n  \n  let answer: JSX.Element | null = null\n\n  const handleModal = () => {\n    setModal(!modal)\n  }\n\n  const handleReset = () => {\n    let randomRows = Math.floor(Math.random() * 10) + 1\n    let randomCols = Math.floor(Math.random() * 10) + 1\n    \n    setCols(randomCols)\n    setRows(randomRows)\n    setMatrix(RANDOM_MATRIX(randomRows, randomCols))\n  }\n\n  try {\n    const connectedCells = new ConnectedCells(rows, cols, matrix)\n    answer = (\n      <>\n        <Alert color=\"success\" className=\"w-100 rounded-0 text-center\">\n          Largest Area: {connectedCells.calc()}\n        </Alert>\n        <Container fluid className=\"d-flex justify-content-center align-items-center mt-5\">\n          <Table cells={connectedCells.cells} />\n        </Container>\n      </>\n    )\n  } catch(error) {\n    answer = (\n      <>\n        <Alert color=\"danger\" className=\"w-100 rounded-0 text-center\">\n          Error: {error.message}\n        </Alert>\n        <Container fluid className=\"d-flex justify-content-center align-items-center mt-5\">\n          <Row className=\"border border-dark p-2\">\n            <Col md=\"10\">\n              Steps:\n              <br/>\n              1) Insert Row and Column, that will generate a default matrix of 0's <br/><br/>\n              2) Insert Custom Matrix or Edit Default Matrix\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Navbar/>\n      <Container fluid className=\"h-100\">\n        <Row className=\"h-100\">\n          <Col md=\"6\" className=\"d-flex justify-content-center align-items-center mb-2\">\n            <Form className=\"w-75\">\n              <FormGroup>\n                <Label for=\"rows\">Rows</Label>\n                <Input \n                  type=\"number\" \n                  name=\"rows\" \n                  placeholder=\"Rows\"\n                  onChange={event => { \n                    setRows(parseInt(event.target.value))\n                    setMatrix(DEFAULT_MATRIX(parseInt(event.target.value), cols))\n                  }} \n                  value={rows.toString()}\n                />\n              </FormGroup>  \n              <FormGroup>\n                <Label for=\"rows\">Columns</Label>\n                <Input \n                  type=\"number\" \n                  name=\"cols\" \n                  placeholder=\"Columns\"\n                  onChange={event => {\n                     setCols(parseInt(event.target.value))\n                     setMatrix(DEFAULT_MATRIX(rows, parseInt(event.target.value)))\n                    }\n                  } \n                  value={cols.toString()}\n                />\n              </FormGroup>\n              {\n                rows && cols\n                ? <FormGroup>\n                    <Label for=\"exampleText\">Matrix</Label>\n                    <Input\n                      type=\"textarea\"\n                      name=\"cols\"\n                      rows={rows}\n                      onChange={event => { setMatrix(event.target.value)}}\n                      value={matrix}\n                      placeholder=\"INSERT MATRIX HERE\"\n                      style={{fontFamily: \"monospace\", fontSize: \"1.5rem\"}}\n                    />\n                  </FormGroup>\n                : <div>\n                    <Alert color=\"danger\">\n                      Please Insert Row and Columns\n                    </Alert>\n                  </div>\n              }\n              <div className=\"d-flex justify-content-between\">\n                <Button\n                  onClick={handleReset}\n                >\n                  Randomize\n                </Button>\n                <Button \n                  color=\"info\" \n                  onClick={() => {handleModal()}}\n                >\n                  App Info\n                </Button>\n              </div>\n            </Form>\n          </Col>\n          <Col md=\"6\" className=\"border-left p-0 mb-2\">\n            {answer}\n          </Col>\n        </Row>\n      </Container>\n      <InfoModal modal={modal} toggleFunc={handleModal} />\n    </>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}